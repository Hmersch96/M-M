# -*- coding: utf-8 -*-
"""Prediccion_Regresión.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BalLsqbgQFG12DjMuEh_zcQJCKqWfL0G

# Predicción sobre AL2-FIUNA mediante regresion logistica



---


Estudiantes:

*   Marcos Ibañez
*   Hugo Melgarejo

**Librerías a utilizar**
"""

#Importamos las librerias de pandas,numpy,matplotlib y sklearn
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
#Sklearn
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import statsmodels.api as sm
import statsmodels.formula.api as smf
from statsmodels.stats.weightstats import ttest_ind
import seaborn as sns
from math import ceil
from collections import Counter
from imblearn.under_sampling import NearMiss

"""# Base de datos, desde GitHub"""

#Importamos nuestra base de datos
url = 'https://raw.githubusercontent.com/diegostaPy/cursoIA/main/datosRendimiento/datosfiltrados.csv'
df = pd.read_csv(url)
df.head()

"""# Pre-procesamiento
Creamos una copia, luego extraemos las columnas que consideramos son útiles a para nuestra predicción de la materia que corresponde.
"""

#Creamos una copia del dataframe
dfcopia = df.copy()

dfcopia= dfcopia[dfcopia['Asignatura']=='ALGEBRA LINEAL 2']

#dfcopia=dfcopia.set_index('id_anony')
#cols= ['Convocatoria','Anho','Aprobado','Anho.Firma','Primer.Par','Segundo.Par','AOT']
cols= ['Aprobado','Primer.Par','Segundo.Par']
dfcopia=dfcopia[cols]
#dfcopia['Semestre']=df['Semestre']
dfcopia

"""Reemplazamos en la columna 'Aprobado' los S y N por 1 y 0 respectivamente."""

dfcopia['Aprobado']=dfcopia['Aprobado'].replace(['S', 'N'],['1','0'])
dfcopia

"""# Definición de entradas y salidas
Examinando el dataset, encontramos que el taller no se carga los primeros años, por lo que para un primer approach consideramos las notas del primer parcial y segundo parcial como entradas.

# Graficamos los datos
"""

X = dfcopia[['Primer.Par','Segundo.Par']]
Y = dfcopia[['Aprobado']]
X2 = dfcopia[['Primer.Par','Segundo.Par']].values
Y2 = dfcopia[['Aprobado']].values

plt.scatter(X2[:,0],X2[:,1],s=40,c=Y2,cmap=plt.cm.Spectral)
plt.show

"""Verificamos si esta o no desbalanceado

"""

Y.Aprobado.value_counts().sort_index()

"""Aqui notamos que está notablemente desbalanceado

#Separación de datos en partes de entrenamiento y de test

Se escoge un tamaño de test del 20%
"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2,random_state = 1234,shuffle = True)
Y_train.Aprobado.value_counts().sort_index()

"""Para balancear la muestra de entrenamiento será necesario recurrir a metodos de balanceo, como podría ser los disponibles en la librería NearMiss."""

from collections import Counter
us = NearMiss(n_neighbors=3, version=2)
X_train_res, Y_train_res = us.fit_resample(X_train, Y_train)

print ("Distribucion antes del resampling {}".format(Counter(Y_train['Aprobado'])))
print ("Distribucion despues del resampling {}".format(Counter(Y_train_res)))

"""Se implementa el modelo de Regresión Logística, se lo entrena y se lo testea."""

algoritmo = LogisticRegression()
#Entrenamos el modelo
algoritmo.fit(X_train_res,Y_train_res)
#Realizamos la prediccion
Y_pred = algoritmo.predict(X_test)

"""#Métricas
**Matriz de confusión**
"""

from sklearn.metrics import confusion_matrix
matriz = confusion_matrix(Y_test,Y_pred)
print(matriz)

import seaborn as sns
sns.heatmap(matriz, annot=True)

"""**Precisión**"""

#Calculamos la precision del modelo
from sklearn.metrics import precision_score
precision = precision_score(Y_test, Y_pred, average="binary", pos_label='1') 
print('Precisión del modelo:')
print(precision)

"""**Reporte del modelo**

"""

from sklearn.metrics import classification_report
print(classification_report(Y_test, Y_pred))

"""#Resultados


"""

#Mostramos el nro de secciones predicho por el modelo
print('Numero de secciones:')
secc = (Y_pred[Y_pred == '0'].size)/60
print(ceil(secc))



